#+title: A Containerized Doom Emacs setup with uBlue
:PROPERTIES:
#+PROPERTY: header-args    :tangle (concat (org-entry-get nil "tangledir" t) (org-element-property :name (org-element-at-point))) :padline no
#+PROPERTY: tangledir      ~/dev/femacs/
#+STARTUP: content
:END:

* =femacs= distrobox assemble file and systemd service file
:properties:
:end:

This section concerns the systemd user service profile. We went with a combination of distrobox assemble file and systemd service file to avoid rebuilding images (and thus pulling packages, etc) when not necessary, since this container is solely for easy access to emacs on my personal devices.

The Assemble file specifies how the distrobox is to be set up.
The systemd service file will automatically start up the toolbox. However, I do not want to reset the container each time.
** Inbox
- [X] See if you can set up =femacs-Cellar= here: [[*Distrobox systemd =.service=][Distrobox systemd =.service=]]
- [X] Set up femacs Profile such that emacs has proper PATH.
   [[*femacs PATH and env][femacs PATH and env]]

   #+begin_src emacs-lisp :tangle no
   (getenv "PATH")
   #+end_src

   Oh, okay, all I needed was to run ~doom env~ with my desired shell environment.

* Distrobox Assemble File =distrobox.ini=
:properties:
:tangledir: ~/.config/systemd/user/
:header-args: :tangle (concat (org-entry-get nil "tangledir" t) "distrobox.ini") :noweb-ref distrobox-assemble :padline no
:end:

[[https://github.com/89luca89/distrobox/blob/main/docs/usage/distrobox-assemble.md][=distrobox assemble= documentation]]


|-----------+---------------------------------------------------|
| keyword   | thoughts                                          |
|-----------+---------------------------------------------------|
| image     | [[https://github.com/ublue-os/toolboxes/tree/main/toolboxes/fedora-toolbox][ublue fedora-toolbox]]                              |
| init      | I don't need systemctl in femacs                  |
| nvidia    | I want nvidia driver integration                  |
| pull      | I don't need to pull the image every single time  |
| root      | This container is not rootful                     |
| replace   | femacs should be rebuilt when there are updates   |
| start_now | Start the container immediately                   |
|           |                                                   |
|-----------+---------------------------------------------------|

#+name: distrobox.ini
#+begin_src conf
[femacs]
image=ghcr.io/ublue-os/fedora-toolbox:latest
init=false
nvidia=true
pull=false
root=false
replace=true
start_now=true
additional_packages="emacs fd-find python-pip nodejs"
#+end_src

- [ ] Q :: Why does [[https://github.com/ublue-os/toolboxes/blob/main/systemd/bluefin-cli/bluefin-cli-distrobox-oneshot.service][this bluefin-cli oneshot]] refer to =bluefin-cli-Cellar=
  But the =distrobox.ini= refers to =systemd-bluefin-cli-Cellar=

- [ ] q :: Replace below packages with homebrew replacements.

** Access bluefin-cli CLI apps
#+begin_src conf
volume="${HOME}/.local/share/bluefin-cli/bluefin/.linuxbrew/Cellar/:/home/linuxbrew/.linuxbrew/Cellar"
#+end_src

We don't use a named podman volume because bluefin already saves to a specific folder on home drive.
: volume=systemd-bluefin-cli-Cellar:/home/linuxbrew/.linuxbrew/Cellar

** TODO COMMENT Packages replaced on Homebrew

There are some packages that come with Fedora-Toolbox.
[[https://github.com/ublue-os/toolboxes/blob/main/toolboxes/fedora-toolbox/packages.fedora]]


*** latex
#+begin_src conf
additional_packages="texlive-scheme-full"
#+end_src

** Packages

*** vterm
#+begin_src conf
additional_packages="libvterm cmake libtool"
#+end_src

*** vlc =is not available on brew=
#+begin_src conf
additional_packages="vlc"
#+end_src
*** pdf-tools
#+begin_src conf
additional_packages="autoconf automake gcc libpng-devel make poppler-devel poppler-glib-devel zlib-devel pkgconf"
#+end_src

*** emacs-everywhere
#+begin_src conf
additional_packages="xclip xdotool xprop xwininfo"
#+end_src
*** dirvish
#+begin_src conf
additional_packages="poppler-utils ffmpegthumbnailer mediainfo ImageMagick"
#+end_src
*** TODO python lsp
https://docs.doomemacs.org/v21.12/modules/lang/python/
#+begin_src conf
additional_packages="pytest python-nose python-black"
additional_packages="pyflakes python-isort"
#+end_src

- [ ] enable basedpyright
# init_hooks=ln -sf /usr/bin/distrobox-host-exec /usr/local/bin/basedpyright;
# pip install basedpyright
*** dictionary and prose
Offline Dictionary
https://docs.doomemacs.org/v21.12/modules/tools/lookup/
#+begin_src conf
additional_packages="wordnet proselint"
#+end_src
*** sqlite
Dash Docsets, Org-Roam
#+begin_src conf
additional_packages="sqlite"
#+end_src
*** debugger
https://docs.doomemacs.org/v21.12/modules/tools/debugger/
#+begin_src conf
additional_packages="lldb gdb"
# missing lldb-mi, much must be compiled
#+end_src
*** emacs-everywhere
*** lsp-bridge
#+begin_src conf
additional_packages="python-epc python-orjson python-sexpdata"
additional_packages="python-six python-setuptools python-paramiko"
additional_packages="python3-rapidfuzz python-watchdog"
#+end_src
*** pandoc
#+begin_src conf
additional_packages="pandoc pandoc-cli"
#+end_src
*** other useful packages
undo compression, direnv
#+begin_src conf
additional_packages="zstd direnv"
#+end_src
** Init Hooks
*** COMMENT Replace Shell
#+begin_src conf :tangle no
init_hooks=ln -fs /bin/sh /usr/bin/sh;
#+end_src

*** Host Utilities
#+begin_src conf
init_hooks=ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/docker;
init_hooks=ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/flatpak;
init_hooks=ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/podman;
init_hooks=ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/rpm-ostree;
init_hooks=ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/transactional-update;

init_hooks=ln -sf /usr/bin/distrobox-host-exec /usr/local/bin/conmon;
init_hooks=ln -sf /usr/bin/distrobox-host-exec /usr/local/bin/crun;
init_hooks=ln -sf /usr/bin/distrobox-host-exec /usr/local/bin/docker-compose;
init_hooks=ln -sf /usr/bin/distrobox-host-exec /usr/local/bin/xdg-open;
#+end_src
** COMMENT Unused
#+begin_src conf
# You can add comments using this #
# [arch] # also inline comments are supported
# additional_packages="git vim tmux nodejs"
# home=/tmp/home
# image=archlinux:latest
# init=false
# start_now=true
# init_hooks="touch /init-normal"
# nvidia=true
# pre_init_hooks="touch /pre-init"
# pull=true
# root=false
# replace=false
# volume="/tmp/test:/run/a /tmp/test:/run/b"


# [tumbleweed_distrobox]
# image=registry.opensuse.org/opensuse/distrobox
# pull=true
# additional_packages="acpi bash-completion findutils iproute iputils sensors inotify-tools unzip"
# additional_packages="net-tools nmap openssl procps psmisc rsync man tig tmux tree vim htop xclip yt-dlp"
# additional_packages="git git-credential-libsecret"
# additional_packages="patterns-devel-base-devel_basis"
# additional_packages="ShellCheck ansible-lint clang clang-tools codespell ctags desktop-file-utils gcc golang jq python3"
# additional_packages="python3-bashate python3-flake8 python3-mypy python3-pipx python3-pycodestyle python3-pyflakes python3-pylint python3-python-lsp-server python3-rstcheck python3-yapf python3-yamllint rustup shfmt"
# additional_packages="kubernetes-client helm"
# init_hooks=GOPATH="${HOME}/.local/share/system-go" GOBIN=/usr/local/bin go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest;
# init_hooks=GOPATH="${HOME}/.local/share/system-go" GOBIN=/usr/local/bin go install github.com/onsi/ginkgo/v2/ginkgo@latest;
# init_hooks=GOPATH="${HOME}/.local/share/system-go" GOBIN=/usr/local/bin go install golang.org/x/tools/cmd/goimports@latest;
# init_hooks=GOPATH="${HOME}/.local/share/system-go" GOBIN=/usr/local/bin go install golang.org/x/tools/gopls@latest;
# init_hooks=GOPATH="${HOME}/.local/share/system-go" GOBIN=/usr/local/bin go install sigs.k8s.io/kind@latest;
# init_hooks=ln -sf /usr/bin/distrobox-host-exec /usr/local/bin/conmon;
# init_hooks=ln -sf /usr/bin/distrobox-host-exec /usr/local/bin/crun;
# init_hooks=ln -sf /usr/bin/distrobox-host-exec /usr/local/bin/docker;
# init_hooks=ln -sf /usr/bin/distrobox-host-exec /usr/local/bin/docker-compose;
# init_hooks=ln -sf /usr/bin/distrobox-host-exec /usr/local/bin/flatpak;
# init_hooks=ln -sf /usr/bin/distrobox-host-exec /usr/local/bin/podman;
# init_hooks=ln -sf /usr/bin/distrobox-host-exec /usr/local/bin/xdg-open;
# exported_apps="htop"
# exported_bins="/usr/bin/htop /usr/bin/git"
# exported_bins_path="~/.local/bin"
#+end_src
* DONE Distrobox systemd =.service=
:properties:
:tangledir: ~/.config/systemd/user/
:end:

Make sure that you use =%h= instead of =~=
When I want to re-install femacs, call ~distrobox assemble rm --file /my/custom/distrobox.ini~ before ~systemctl --user daemon-reload~ and ~systemctl --user start femacs-distrobox.service~

- [ ] Figure out what I can delegate out from here and into bluefin-cli.

ExecStart=/usr/bin/distrobox assemble create --file %h/.config/containers/distrobox.ini -n femacs
#+name: femacs-distrobox.service
#+begin_src conf
[Unit]
Description=Fedora Toolbox for your distrobox fun
Wants=systemd-bluefin-cli-Cellar

[Service]
Type=oneshot
ExecStart=/usr/bin/distrobox assemble create --file %h/.config/systemd/user/distrobox.ini -n femacs
ExecStart=/usr/bin/distrobox enter femacs
RemainAfterExit=true
#+end_src

- [ ] Q :: Why does [[https://github.com/ublue-os/toolboxes/blob/main/systemd/bluefin-cli/bluefin-cli-distrobox-oneshot.service][this bluefin-cli oneshot]] refer to =bluefin-cli-Cellar=
  But the =distrobox.ini= refers to =systemd-bluefin-cli-Cellar=

* COMMENT package installations
** homebrew
** dnf
** pip
** npm
As root:
#+begin_src
npm install -g

dockerfile-language-server-nodejs
typescript-language-server typescript
markdownlint
#+end_src

- [ ] Javascript LSP
#+begin_example

# javascript lsp
# https://docs.doomemacs.org/v21.12/modules/lang/javascript/
# https://yarnpkg.com/getting-started/install
# additional_packages="nodejs"
# npm install -g typescript-language-server typescript
#+end_example

* Distrobox Assemble File

* Systemd Service File
